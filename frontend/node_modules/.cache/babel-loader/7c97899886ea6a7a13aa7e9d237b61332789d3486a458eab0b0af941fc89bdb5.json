{"ast":null,"code":"const PREFERENCES_KEY = 'app_preferences';\nconst PREFERENCES_VERSION = 1; // Increment this when making breaking changes\n\nconst validatePreferences = prefs => {\n  const validationRules = {\n    theme: value => ['light', 'dark'].includes(value),\n    filters: value => {\n      return value && Array.isArray(value.status) && Array.isArray(value.campaign) && Array.isArray(value.type);\n    },\n    navPanelOpen: value => typeof value === 'boolean',\n    savedViews: value => Array.isArray(value) && value.every(view => view.id && typeof view.name === 'string' && validatePreferences.filters(view.filters)),\n    activeView: value => typeof value === 'string',\n    version: value => typeof value === 'number'\n  };\n  const isValid = Object.keys(validationRules).every(key => {\n    if (!prefs[key]) return false;\n    return validationRules[key](prefs[key]);\n  });\n  return isValid;\n};\nconst migratePreferences = oldPrefs => {\n  const currentVersion = oldPrefs.version || 0;\n  let prefs = {\n    ...oldPrefs\n  };\n\n  // Migration steps\n  const migrations = [\n  // Version 0 to 1\n  prefs => {\n    return {\n      ...prefs,\n      savedViews: [{\n        id: 'default',\n        name: 'All Items',\n        filters: prefs.filters || defaultPreferences.filters\n      }],\n      activeView: 'default',\n      version: 1\n    };\n  }\n  // Add more migrations here as needed\n  ];\n\n  // Apply needed migrations\n  for (let v = currentVersion; v < PREFERENCES_VERSION; v++) {\n    prefs = migrations[v](prefs);\n  }\n  return prefs;\n};\nconst defaultPreferences = {\n  theme: 'light',\n  filters: {\n    status: [],\n    campaign: [],\n    type: []\n  },\n  navPanelOpen: false,\n  savedViews: [{\n    id: 'default',\n    name: 'All Items',\n    filters: {\n      status: [],\n      campaign: [],\n      type: []\n    }\n  }],\n  activeView: 'default',\n  version: PREFERENCES_VERSION\n};\nexport const loadPreferences = () => {\n  try {\n    const saved = localStorage.getItem(PREFERENCES_KEY);\n    if (saved) {\n      let parsedPrefs = JSON.parse(saved);\n\n      // Migrate old preferences if needed\n      if (!parsedPrefs.version || parsedPrefs.version < PREFERENCES_VERSION) {\n        parsedPrefs = migratePreferences(parsedPrefs);\n        savePreferences(parsedPrefs);\n      }\n\n      // Validate preferences\n      if (!validatePreferences(parsedPrefs)) {\n        console.error('Invalid preferences found, resetting to defaults');\n        return defaultPreferences;\n      }\n      return parsedPrefs;\n    }\n    return defaultPreferences;\n  } catch (error) {\n    console.error('Error loading preferences:', error);\n    return defaultPreferences;\n  }\n};\nexport const savePreferences = preferences => {\n  try {\n    localStorage.setItem(PREFERENCES_KEY, JSON.stringify(preferences));\n  } catch (error) {\n    console.error('Error saving preferences:', error);\n  }\n};\nexport const updatePreference = (key, value) => {\n  const preferences = loadPreferences();\n  preferences[key] = value;\n  savePreferences(preferences);\n  return preferences;\n};","map":{"version":3,"names":["PREFERENCES_KEY","PREFERENCES_VERSION","validatePreferences","prefs","validationRules","theme","value","includes","filters","Array","isArray","status","campaign","type","navPanelOpen","savedViews","every","view","id","name","activeView","version","isValid","Object","keys","key","migratePreferences","oldPrefs","currentVersion","migrations","defaultPreferences","v","loadPreferences","saved","localStorage","getItem","parsedPrefs","JSON","parse","savePreferences","console","error","preferences","setItem","stringify","updatePreference"],"sources":["C:/Users/zvarn/Desktop/Projects/frontend/src/services/preferences.js"],"sourcesContent":["const PREFERENCES_KEY = 'app_preferences';\r\nconst PREFERENCES_VERSION = 1; // Increment this when making breaking changes\r\n\r\nconst validatePreferences = (prefs) => {\r\n  const validationRules = {\r\n    theme: (value) => ['light', 'dark'].includes(value),\r\n    filters: (value) => {\r\n      return value && \r\n        Array.isArray(value.status) && \r\n        Array.isArray(value.campaign) && \r\n        Array.isArray(value.type);\r\n    },\r\n    navPanelOpen: (value) => typeof value === 'boolean',\r\n    savedViews: (value) => Array.isArray(value) && value.every(view => (\r\n      view.id && \r\n      typeof view.name === 'string' && \r\n      validatePreferences.filters(view.filters)\r\n    )),\r\n    activeView: (value) => typeof value === 'string',\r\n    version: (value) => typeof value === 'number'\r\n  };\r\n\r\n  const isValid = Object.keys(validationRules).every(key => {\r\n    if (!prefs[key]) return false;\r\n    return validationRules[key](prefs[key]);\r\n  });\r\n\r\n  return isValid;\r\n};\r\n\r\nconst migratePreferences = (oldPrefs) => {\r\n  const currentVersion = oldPrefs.version || 0;\r\n  let prefs = { ...oldPrefs };\r\n\r\n  // Migration steps\r\n  const migrations = [\r\n    // Version 0 to 1\r\n    (prefs) => {\r\n      return {\r\n        ...prefs,\r\n        savedViews: [\r\n          {\r\n            id: 'default',\r\n            name: 'All Items',\r\n            filters: prefs.filters || defaultPreferences.filters\r\n          }\r\n        ],\r\n        activeView: 'default',\r\n        version: 1\r\n      };\r\n    }\r\n    // Add more migrations here as needed\r\n  ];\r\n\r\n  // Apply needed migrations\r\n  for (let v = currentVersion; v < PREFERENCES_VERSION; v++) {\r\n    prefs = migrations[v](prefs);\r\n  }\r\n\r\n  return prefs;\r\n};\r\n\r\nconst defaultPreferences = {\r\n  theme: 'light',\r\n  filters: {\r\n    status: [],\r\n    campaign: [],\r\n    type: []\r\n  },\r\n  navPanelOpen: false,\r\n  savedViews: [\r\n    {\r\n      id: 'default',\r\n      name: 'All Items',\r\n      filters: {\r\n        status: [],\r\n        campaign: [],\r\n        type: []\r\n      }\r\n    }\r\n  ],\r\n  activeView: 'default',\r\n  version: PREFERENCES_VERSION\r\n};\r\n\r\nexport const loadPreferences = () => {\r\n  try {\r\n    const saved = localStorage.getItem(PREFERENCES_KEY);\r\n    if (saved) {\r\n      let parsedPrefs = JSON.parse(saved);\r\n      \r\n      // Migrate old preferences if needed\r\n      if (!parsedPrefs.version || parsedPrefs.version < PREFERENCES_VERSION) {\r\n        parsedPrefs = migratePreferences(parsedPrefs);\r\n        savePreferences(parsedPrefs);\r\n      }\r\n\r\n      // Validate preferences\r\n      if (!validatePreferences(parsedPrefs)) {\r\n        console.error('Invalid preferences found, resetting to defaults');\r\n        return defaultPreferences;\r\n      }\r\n\r\n      return parsedPrefs;\r\n    }\r\n    return defaultPreferences;\r\n  } catch (error) {\r\n    console.error('Error loading preferences:', error);\r\n    return defaultPreferences;\r\n  }\r\n};\r\n\r\nexport const savePreferences = (preferences) => {\r\n  try {\r\n    localStorage.setItem(PREFERENCES_KEY, JSON.stringify(preferences));\r\n  } catch (error) {\r\n    console.error('Error saving preferences:', error);\r\n  }\r\n};\r\n\r\nexport const updatePreference = (key, value) => {\r\n  const preferences = loadPreferences();\r\n  preferences[key] = value;\r\n  savePreferences(preferences);\r\n  return preferences;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}