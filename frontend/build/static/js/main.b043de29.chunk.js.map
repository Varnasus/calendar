{"version":3,"sources":["components/Calendar.js","components/AddItemModal.js","App.js","index.js"],"names":["Calendar","_ref","items","today","Date","start","startOfMonth","end","endOfMonth","days","eachDayOfInterval","React","createElement","className","format","map","day","key","toString","filter","item","date","id","status","toLowerCase","title","AddItemModal","onSave","onCancel","formData","setFormData","useState","description","toISOString","split","isSubmitting","setIsSubmitting","error","setError","handleChange","e","[object Object]","target","name","value","onSubmit","async","preventDefault","trim","Error","err","message","type","onChange","required","disabled","onClick","App","showModal","setShowModal","setItems","useEffect","fetchItems","response","fetch","ok","data","json","console","method","headers","Content-Type","body","JSON","stringify","newItem","savedItem","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b043de29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { startOfMonth, endOfMonth, eachDayOfInterval, format } from 'date-fns';\r\nimport './Calendar.css';\r\n\r\nconst calendarStyles = {\r\n  container: {\r\n    backgroundColor: 'var(--background-color)',\r\n    border: '1px solid var(--primary-color)',\r\n    borderRadius: '8px',\r\n    padding: '20px',\r\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'\r\n  },\r\n  header: {\r\n    backgroundColor: 'var(--primary-color)',\r\n    color: 'white',\r\n    padding: '10px'\r\n  },\r\n  dayCell: {\r\n    border: '1px solid var(--secondary-color)',\r\n    backgroundColor: 'white',\r\n    '&:hover': {\r\n      backgroundColor: 'var(--secondary-color)'\r\n    }\r\n  }\r\n}\r\n\r\nfunction Calendar({ items }) {\r\n  const today = new Date();\r\n  const start = startOfMonth(today);\r\n  const end = endOfMonth(today);\r\n  const days = eachDayOfInterval({ start, end });\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <h2>{format(today, 'MMMM yyyy')}</h2>\r\n      <div className=\"calendar-grid\">\r\n        {days.map((day) => (\r\n          <div key={day.toString()} className=\"calendar-cell\">\r\n            <div className=\"date\">{format(day, 'd')}</div>\r\n            <div className=\"items\">\r\n              {items\r\n                .filter((item) => item.date === format(day, 'yyyy-MM-dd'))\r\n                .map((item) => (\r\n                  <div\r\n                    key={item.id}\r\n                    className={`calendar-item status-${item.status.toLowerCase()}`}\r\n                  >\r\n                    <div className=\"item-title\">{item.title}</div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar; ","import React, { useState } from 'react';\r\nimport './AddItemModal.css';\r\n\r\nfunction AddItemModal({ onSave, onCancel }) {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    status: 'Backlog',\r\n    date: new Date().toISOString().split('T')[0],\r\n  });\r\n  \r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!formData.title.trim()) {\r\n        throw new Error('Title is required');\r\n      }\r\n      if (!formData.date) {\r\n        throw new Error('Date is required');\r\n      }\r\n\r\n      await onSave(formData);\r\n      // Modal will be closed by the parent component after successful save\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save item');\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    // Clear error when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  const modalStyles = {\r\n    content: {\r\n      backgroundColor: 'var(--background-color)',\r\n      border: '2px solid var(--primary-color)',\r\n      borderRadius: '8px',\r\n      padding: '20px'\r\n    },\r\n    button: {\r\n      backgroundColor: 'var(--primary-color)',\r\n      color: 'white',\r\n      '&:hover': {\r\n        backgroundColor: 'var(--hover-color)'\r\n      }\r\n    },\r\n    input: {\r\n      border: '1px solid var(--primary-color)',\r\n      '&:focus': {\r\n        outline: 'none',\r\n        borderColor: 'var(--hover-color)',\r\n        boxShadow: '0 0 0 2px var(--secondary-color)'\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal\">\r\n        <h2>Add New Item</h2>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Title: <span className=\"required\">*</span></label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={formData.title}\r\n              onChange={handleChange}\r\n              required\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Description:</label>\r\n            <textarea\r\n              name=\"description\"\r\n              value={formData.description}\r\n              onChange={handleChange}\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Status:</label>\r\n            <select \r\n              name=\"status\" \r\n              value={formData.status} \r\n              onChange={handleChange}\r\n              disabled={isSubmitting}\r\n            >\r\n              <option value=\"Backlog\">Backlog</option>\r\n              <option value=\"Planned\">Planned</option>\r\n              <option value=\"In Progress\">In Progress</option>\r\n              <option value=\"Done\">Done</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Date: <span className=\"required\">*</span></label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              value={formData.date}\r\n              onChange={handleChange}\r\n              required\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          <div className=\"modal-buttons\">\r\n            <button \r\n              type=\"button\" \r\n              onClick={onCancel}\r\n              disabled={isSubmitting}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button \r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? 'Saving...' : 'Save'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddItemModal; ","import React, { useState, useEffect } from 'react';\r\nimport Calendar from './components/Calendar';\r\nimport AddItemModal from './components/AddItemModal';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  const fetchItems = async () => {\r\n    try {\r\n      const response = await fetch('/api/items');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setItems(data);\r\n    } catch (error) {\r\n      console.error('Error fetching items:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddItem = async (newItem) => {\r\n    try {\r\n      const response = await fetch('/api/items', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newItem),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const savedItem = await response.json();\r\n      setItems([...items, savedItem]);\r\n      setShowModal(false);\r\n    } catch (error) {\r\n      console.error('Error adding item:', error);\r\n      throw error; // This will be caught by the AddItemModal error handling\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1>Calendar</h1>\r\n        <button onClick={() => setShowModal(true)} className=\"add-button\">\r\n          Add New\r\n        </button>\r\n      </div>\r\n      <Calendar items={items} />\r\n      {showModal && (\r\n        <AddItemModal\r\n          onSave={handleAddItem}\r\n          onCancel={() => setShowModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; ","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}